/*
Copyright 2019 eterna2

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/e2fyi/k8s-helm-operator/pkg/apis/helmoperator.e2.fyi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelmOperationLister helps list HelmOperations.
type HelmOperationLister interface {
	// List lists all HelmOperations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.HelmOperation, err error)
	// HelmOperations returns an object that can list and get HelmOperations.
	HelmOperations(namespace string) HelmOperationNamespaceLister
	HelmOperationListerExpansion
}

// helmOperationLister implements the HelmOperationLister interface.
type helmOperationLister struct {
	indexer cache.Indexer
}

// NewHelmOperationLister returns a new HelmOperationLister.
func NewHelmOperationLister(indexer cache.Indexer) HelmOperationLister {
	return &helmOperationLister{indexer: indexer}
}

// List lists all HelmOperations in the indexer.
func (s *helmOperationLister) List(selector labels.Selector) (ret []*v1alpha1.HelmOperation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HelmOperation))
	})
	return ret, err
}

// HelmOperations returns an object that can list and get HelmOperations.
func (s *helmOperationLister) HelmOperations(namespace string) HelmOperationNamespaceLister {
	return helmOperationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelmOperationNamespaceLister helps list and get HelmOperations.
type HelmOperationNamespaceLister interface {
	// List lists all HelmOperations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.HelmOperation, err error)
	// Get retrieves the HelmOperation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.HelmOperation, error)
	HelmOperationNamespaceListerExpansion
}

// helmOperationNamespaceLister implements the HelmOperationNamespaceLister
// interface.
type helmOperationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelmOperations in the indexer for a given namespace.
func (s helmOperationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HelmOperation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HelmOperation))
	})
	return ret, err
}

// Get retrieves the HelmOperation from the indexer for a given namespace and name.
func (s helmOperationNamespaceLister) Get(name string) (*v1alpha1.HelmOperation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("helmoperation"), name)
	}
	return obj.(*v1alpha1.HelmOperation), nil
}
