/*
Copyright 2019 eterna2

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/e2fyi/k8s-helm-operator/pkg/apis/helmoperator.e2.fyi/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeHelmOperations implements HelmOperationInterface
type FakeHelmOperations struct {
	Fake *FakeHelmoperatorV1alpha1
	ns   string
}

var helmoperationsResource = schema.GroupVersionResource{Group: "helmoperator", Version: "v1alpha1", Resource: "helmoperations"}

var helmoperationsKind = schema.GroupVersionKind{Group: "helmoperator", Version: "v1alpha1", Kind: "HelmOperation"}

// Get takes name of the helmOperation, and returns the corresponding helmOperation object, and an error if there is any.
func (c *FakeHelmOperations) Get(name string, options v1.GetOptions) (result *v1alpha1.HelmOperation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(helmoperationsResource, c.ns, name), &v1alpha1.HelmOperation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.HelmOperation), err
}

// List takes label and field selectors, and returns the list of HelmOperations that match those selectors.
func (c *FakeHelmOperations) List(opts v1.ListOptions) (result *v1alpha1.HelmOperationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(helmoperationsResource, helmoperationsKind, c.ns, opts), &v1alpha1.HelmOperationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.HelmOperationList{ListMeta: obj.(*v1alpha1.HelmOperationList).ListMeta}
	for _, item := range obj.(*v1alpha1.HelmOperationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested helmOperations.
func (c *FakeHelmOperations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(helmoperationsResource, c.ns, opts))

}

// Create takes the representation of a helmOperation and creates it.  Returns the server's representation of the helmOperation, and an error, if there is any.
func (c *FakeHelmOperations) Create(helmOperation *v1alpha1.HelmOperation) (result *v1alpha1.HelmOperation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(helmoperationsResource, c.ns, helmOperation), &v1alpha1.HelmOperation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.HelmOperation), err
}

// Update takes the representation of a helmOperation and updates it. Returns the server's representation of the helmOperation, and an error, if there is any.
func (c *FakeHelmOperations) Update(helmOperation *v1alpha1.HelmOperation) (result *v1alpha1.HelmOperation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(helmoperationsResource, c.ns, helmOperation), &v1alpha1.HelmOperation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.HelmOperation), err
}

// Delete takes name of the helmOperation and deletes it. Returns an error if one occurs.
func (c *FakeHelmOperations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(helmoperationsResource, c.ns, name), &v1alpha1.HelmOperation{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeHelmOperations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(helmoperationsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.HelmOperationList{})
	return err
}

// Patch applies the patch and returns the patched helmOperation.
func (c *FakeHelmOperations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.HelmOperation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(helmoperationsResource, c.ns, name, pt, data, subresources...), &v1alpha1.HelmOperation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.HelmOperation), err
}
